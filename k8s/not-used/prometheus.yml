---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-sa

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - services
      - endpoints
      - pods
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions", "apps"]
    resources:
      - replicasets
    verbs: ["get", "list", "watch"]
  - apiGroups: ["batch"]
    resources:
      - jobs
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus-sa # Make sure this matches your service account
    namespace: default # Make sure the namespace is correct
roleRef:
  kind: ClusterRole
  name: prometheus
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus-sa
      containers:
        - name: prometheus
          image: prom/prometheus:v2.29.2
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus/
            - name: prometheus-data
              mountPath: /prometheus
            - name: prometheus-rules
              mountPath: /etc/prometheus/alert.rules # Correct mounting point
              subPath: alert.rules # Ensure the subPath references the rules file
          resources:
            requests:
              memory: "512Mi"
              cpu: "150m"
            limits:
              memory: "1Gi"
              cpu: "200m"
      volumes:
        - name: prometheus-config-volume
          configMap:
            name: prometheus-config
        - name: prometheus-data
          emptyDir: {}
        - name: prometheus-rules
          configMap:
            name: prometheus-alert-rules
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
spec:
  type: ClusterIP
  ports:
    - port: 9090
      targetPort: 9090
  selector:
    app: prometheus
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https

      # Scrape nodes (kubelet)
      - job_name: 'kubernetes-nodes'
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443

      # Scrape node-exporter (if you have node-exporter running)
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_pod_label_app]
            action: keep
            regex: node-exporter

      # Scrape all pods in the cluster (optional, for detailed pod metrics)
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_pod_phase]
            action: drop
            regex: Pending|Succeeded|Failed

      # Scrape kube-state-metrics (if you have kube-state-metrics running)
      - job_name: 'kube-state-metrics'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_label_app]
            action: keep
            regex: kube-state-metrics
    rule_files:
      - /etc/prometheus/alert.rules
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
    spec:
      containers:
        - name: alertmanager
          image: prom/alertmanager:v0.21.0
          ports:
            - containerPort: 9093
          volumeMounts:
            - name: alertmanager-config-volume
              mountPath: /etc/alertmanager/
          resources:
            requests:
              memory: "512Mi"
              cpu: "150m"
            limits:
              memory: "1Gi"
              cpu: "200m"
      volumes:
        - name: alertmanager-config-volume
          configMap:
            name: alertmanager-config
---
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
spec:
  type: ClusterIP
  ports:
    - port: 9093
      targetPort: 9093
  selector:
    app: alertmanager
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
data:
  alert.rules: |
    global:
      slack_api_url: 'https://hooks.slack.com/services/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'

    route:
      receiver: slack-notifications # Default receiver for all alerts
      group_by: ["alertname"]
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 3h

      routes:
        - match:
            alertname: TargetDown
          receiver: "slack-notifications"

    receivers:
      - name: "slack-notifications"
        slack_configs:
          - channel: "#assignment-2-sak9791"
            send_resolved: false
            title: "Kubernetes Alert: {{ .CommonAnnotations.summary }}"
            text: "{{ .CommonAnnotations.description }}"

    inhibit_rules:
      - source_match:
          severity: "critical"
        target_match:
          severity: "warning"
        equal: ["namespace", "alertname"]
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-alert-rules
  labels:
    role: prometheus-rulefiles
data:
  alert.rules: |
    groups:
    - name: Deployment Alerts
      rules:
      - alert: FlaskReplicasLow
        expr: sum(kube_deployment_spec_replicas{deployment="flask"}) < 2
        for: 1m  # This fires if Flask has less than 2 replicas for 1 minute
        labels:
          severity: warning
        annotations:
          summary: "Flask deployment replicas are below the desired count"
          description: "The Flask deployment has less than 2 replicas. Current value: {{ $value }}"
        
      - alert: MongoReplicasLow
        expr: sum(kube_deployment_spec_replicas{deployment="mongo"}) < 1
        for: 2m  # This fires if Mongo has less than 1 replica for 2 minutes
        labels:
          severity: critical
        annotations:
          summary: "Mongo deployment replicas are below the desired count"
          description: "The Mongo deployment has less than 1 replica. Current value: {{ $value }}"
